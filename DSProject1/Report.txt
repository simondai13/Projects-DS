===Design/Framework===:
Interfaces:
Our only interface is the MigratableProcess interface, which extends the Runnable and Serializable interfaces. This groups all MigratableProcesses into one type which we can use to run/migrate in our ProcessManager class, where we do not know what classes we will be running. This abstraction allows our ProcessManager to run and migrate any type of class that implements MigratableProcess (can run because a MigratableProcess must implement Runnable, and can be migrated because it should implement suspend() and can be Serialized).

Driver classes:
The first important class is the ProcessManagerServer class, of which there should only be once instance for each set of ProcessManagerClients. The ProcessManagerServer's only job is to coordinate a set of clients; it cannot run processes by itself. If a ProcessManagerClient wants to perform any task, it has to send a ProcessRequest to the server, and the server will acknowledge the request by responding with another ProcessRequest, then the client can perform the task.

The ProcessManagerClient class represents a single node in the network, that has the ability to run processes. A ProcessManagerClient has methods for starting MigratableProcesses, migrating MigratableProcesses, and polling about the status of certain MigratableProcesses, given an instance of the proccess, or an ID. We assign each process that we start from a client a "unique" id (The id's are a randomly generated long, so the chances of having 2 ids that are the same are very low, probably lower than the chances of having some network failure). Then, we can use that id as an identifier for each process. Migrating a process to another node/client only requires a reference to the running instance of the MigratableProcess, or its id. Starting a MigratableProcess requires an instance of a MigratableProcess to be passed in, rather than passing in the name of a process. This allows us to avoid using reflections, and forces users that use our framework to instantiate their own Runnable processes. This also allows us to not have to try and start classes that are not of type MigratableProcess. 

We also have a few "information classes," the TaggedMP, NodeAddr and ProcessRequest classes. These classes are used by the ProcessManagerServer to send information regarding MigratableProcesses and clients. These classes are used to consolidate information when being sent between sockets.

File IO classes: 

We built a TransactionalFileInputStream and TransactionalFileOutputStream class to handle file IO in a way safe for process migration. We leave a file descriptor open for multiple reads/writes to the same file, until we migrate the process, in which case we close the file descriptor, and re-open it when we use the file again, after the process has been successfully migrated. To avoid race conditions, we synchronize our reads and writes with the process migration, so we don't start a migration while a process is still has a file open.

Making MigratableProcesses:

MigratableProcesses should implement the MigratableProcess interface, so they should (transitively) be implementing Runnable and Serializable. A MigratableProcess needs both run() and suspend() methods. This allows them to be run and migrated. Also, after being suspended with a call to suspend(), the process should continue running where it left off when the run() method is called (assuming all of its instance variables remain intact). Then, these classes should be able to be managed by ProcessManagers.

===Implementation/Bugs===:
Our implementation should have full functionality for both starting and migrating processes that implement MigratableProcess. Specifically, for migration of processes, given a destination and process (by id or instance), we can migrate from any source node to the destination node, as long as both are valid. We do not necessarily have to call the migrate function from the source node, any node can migrate processes from any other node, as long as it has the process instance or process id. There should be no problems unless some sort of network error occurs (a migration might fail if a socket is shut down, for example), or some data is misentered, etc. 

Example MigratableProcesses
We included 3 classes to demonstrate process migration in our framework. The three classes all implement MigratableProcess.

-TimeBomb: The TimeBomb class is instantiated with a single integer parameter, the "counter." When run, the process continuously decrements the counter, until it reaches 0, when the time bomb "goes off" by outputting "boom" to std.out. The process can be suspended by calling the .suspend() method, which pauses the program after the next decrement operation completes. The state of the program is only contained in the counter instance variable. When migrated, the process should maintain the state of the counter, and upon resuming, should start counting down from the counter value. Notice that this class does not use any file IO, so it only tests the basic process migration properties. This class is used primarily for early testing purposes.

-TimeBombFile: The TimeBombFile class has the same purpose as the TimeBomb class; however, it includes file IO. It is instantiated with a countdown value, and an output file, where the class will output to. The class will output each countdown number, until it reaches 0, when it will output "boom." This class is a simple process that incorporates file IO, so it is good for testing process migration with file IO, and synchronization/locking.

-BadFileCopy: The BadFileCopy class copies an input file to an output file by reading in bytes one at a time from the input file, while outputting them to an output file.

===Required Libraries/System Requirements===:
We only require jdk1.7. Also, when using file IO, a shared file system is required in order to maintain consistency in processes that use the files.

===Running the project===:
To run your own example classes, in a main function, you would first instantiate a ProcessManagerServer to handle all of the nodes. Then, each node that you would want to run processes on would need to create a ProcessManagerClient. After doing that, you can start, migrate, and poll MigratableProcesses from any node (this is accomplished from method calls to the ProcessManagerClient instances). 

===Running our examples===:
You would run the example classes the same way you would run your own MigratableProcess (detailed in the section above). We have included a Main.java class that contains a main function that runs all of our example classes, and tests the features of our program. By default, the processes get migrated to the local host, not across the network, but this can be easily changed by editing the address variable in the main function. Our example main creates a single server instance and 2 client instances on the local host, starts a TimeBomb process on client1, migrates the process to client2, then migrates the process back to client1 (these should be successful). Also, we start a BadFileCopy process on client 1, then attempt to migrate that process to a node that does not exist, which should fail, and leave the process on client1. Then, we try to migrate the process to the ProcessManagerServer, which also should fail because the server cannot run processes. Throughout all this, we also poll the status of the two processes, to determine whether the processes are running, and on which node they are running.